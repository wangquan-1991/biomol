# rifdesign结合RFdiffusion  
虽然RFdiffusion等方法已经提供了一种通用的小蛋白的binder设计流程，但是当关键scaffold为loop等柔性较大区域时，这种方法可能还需要改善
我们可以尝试基于rifdock生成更多的hotspot，之后再基于RFdiffusion的流程进行设计

rifdock环境：
rifdock需要旧版本的rosetta，
使用rosetta_src_3.9_bundle，+ubuntu18
singularity pull ubuntu_18.04.sif docker://ubuntu:18.04
 
singularity build --sandbox ubuntu_18.04_sandbox ubuntu_18.04.sif

singularity shell --writable --fakeroot ubuntu_18.04_sandbox
将所有文件复制到ubuntu_18.04_sandbox文件夹内
tar -xzvf rosetta_*.tgz
apt-get update
apt-get install -y software-properties-common gcc-6 g++-6 cmake ninja-build
apt-get install -y python2.7
apt install cmake
apt-get update
apt-get install -y zlib1g-dev
apt-get install -y libboost1.65-dev
apt-get install -y g++-6

cd your/real/path/rosetta_src_2018.09.60072_bundle/main/source

./ninja_build.py cxx11_omp -t rosetta_scripts -remake
cd rifdock
mkdir build
cd build
CC=gcc-6 CXX=g++-6 export CC CXX

CXXFLAGS="-isystem /root/SYSX0003/wq/soft/docker/boost_1_65_0" CMAKE_ROSETTA_PATH=/root/SYSX0003/wq/soft/docker/rosetta_src_2018.09.60072_bundle/main CMAKE_FINAL_ROSETTA_PATH=/root/SYSX0003/wq/soft/docker/rosetta_src_2018.09.60072_bundle/main/source/cmake/build_cxx11_omp cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=/root/SYSX0003/wq/soft/docker/boost_1_65_0/stage/lib

make -j20 rif_dock_test rifgen

测试：
rifdock/build/apps/rosetta/rifgen  -- help
rifdock/build/apps/rosetta/rif_dock_test  --help

exit
singularity build --fakeroot rifdock.sif ubuntu_18.04_sandbox
#有时会出现共享库确实报错，重新指定即可：
echo 'export LD_LIBRARY_PATH=/opt/wq/rifdock/build/lib:/opt/wq/rosetta_src_2018.09.60072_bundle/main/source/cmake/build_cxx11_omp:$LD_LIBRARY_PATH' >> ~/.bashrc
source ~/.bashrc



后续制作docker 一劳永逸。。
镜像软件路径：/home/ai/software

